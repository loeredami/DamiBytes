index:
# Set the bit mode
bits 64

# Jump to memory address to where the main marker is.
ptr main
jump

kernel:   "kernel32.dll" 0
write:    "WriteFile"    0 
message:  "Hello, World!\n" 0

writeAddr: 0
kernelAddr: 0

size: 0
messagePtr: 0
return: 0

print:
    push 0
    load 8 size
    load 8 messagePtr
    #stdout {
    push 0x08 data # data is another instruction, it was put inline to make it clearer
    #}
    # Number of Arguments
    push 4
    # Get the syscall Number from memory and push it on the stack once again. 
    load 8 writeAddr
    # Finally call the syscall
    syscall

    load 8 return
    jump

main:
    # Pushes the memory address of the strings.
    ptr kernel

    # This first gets the kernel dll file name from the stack, then the function name.
    # It then gets the syscall address of the function name from the DLL and pushes it on the stack 
    ext

    # Pop the last thing from the stack and put it in a memory address, first size is given in bytes.
    # 8 bytes -> 64 Bits
    store 8 kernelAddr

    ptr write
    load 8 kernelAddr
    func

    store 8 writeAddr

    push 14
    store 8 size
    ptr message
    store 8 messagePtr
    ptr helloWorldMessageDone
    store 8 return 
    ptr print
    jump 
    helloWorldMessageDone:

    push 12
    store 8 size
    ptr kernel
    store 8 messagePtr
    ptr kernelMessageDone
    store 8 return 
    ptr print
    jump 
    kernelMessageDone:

    # This shuts down the current process, since it's the only one, the VM should simply shutdown.
    exit
